import addition from './addition';
import arraysJoin from './arraysJoin';
import calculator from './calculator';
import degToRad from './degToRad';
import division from './division';
import euclideanAlgorithm from './euclideanAlgorithm';
import fact from './fact';
import getArraysDiff from './getArraysDiff';
import getArraysIntersect from './getArraysIntersect';
import getDecimalLength from './getDecimalLength';
import isDouble from './isDouble';
import isNumber from './isNumber';
import isPrimeNumber from './isPrimeNumber';
import lcm from './lcm';
import max from './max';
import min from './min';
import multiplication from './multiplication';
import nCr from './nCr';
import nCrs from './nCrs';
import nPr from './nPr';
import primeFactorization from './primeFactorization';
import quickSort from './quickSort';
import quotient from './quotient';
import radToDeg from './radToDeg';
import random from './random';
import reduce from './reduce';
import repeatedTrial from './repeatedTrial';
import subtract from './subtract';
import toBinary from './toBinary';
import valueSwap from './valueSwap';
declare const UMT: {
    fact: (x: number) => number;
    lcm: (x: number, y: number) => number;
    nCr: (n: number, r: number) => number;
    nCrs: (n: number, r: number) => number;
    nPr: (n: number, r: number) => number;
    quotient: (x: number, y: number) => number[];
    reduce: (x: number, y: number) => {
        x: number;
        y: number;
        gcd?: undefined;
    } | {
        x: number;
        y: number;
        gcd: number;
    };
    repeatedTrial: (n: number, r: number, p: {
        x: number;
        y: number;
    }) => number[];
    getArraysIntersect: (array: any[], ...arrays: any[]) => any[];
    getArraysDiff: (array: any[], ...arrays: any[]) => any[];
    max: (...num: number[]) => number;
    min: (num: number[]) => number;
    arraysJoin: (array: any[], ...arrays: any[]) => any[];
    isDouble: (x: any, loose?: boolean) => boolean;
    isNumber: (x: any, loose?: boolean) => boolean;
    valueSwap: (x: number, y: number) => number[];
    getDecimalLength: (value: number) => number;
    subtract: (x: number, y: number) => number;
    multiplication: (x: number, y: number) => number;
    addition: (x: number, y: number) => number;
    division: (x: number, y: number) => number[];
    isPrimeNumber: (n: number) => boolean;
    toBinary: (x: number, radix?: number) => string | ((x: number, radix?: number) => string | any);
    degToRad: (x: number) => number;
    radToDeg: (x: number) => number;
    primeFactorization: (x: number) => {
        number: number;
        count: number;
    }[];
    quickSort: (array: any[], startID: number, endID: number) => any[];
    calculator: (x: string) => string;
    random: (num: number) => number;
    euclideanAlgorithm: (x: number, y: number, ...z: number[]) => number;
};
export { fact, lcm, nCr, nCrs, nPr, quotient, reduce, repeatedTrial, getArraysIntersect, getArraysDiff, max, min, arraysJoin, isDouble, isNumber, valueSwap, getDecimalLength, subtract, multiplication, addition, division, isPrimeNumber, toBinary, degToRad, radToDeg, primeFactorization, quickSort, calculator, random, euclideanAlgorithm, };
export default UMT;
